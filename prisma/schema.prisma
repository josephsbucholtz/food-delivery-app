generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
        

enum UserRole {
  USER
  ADMIN
}

enum ProductCategory {
  FRUIT
  VEGETABLE
  DAIRY
  MEAT
}

enum OrderStatus {
  PENDING
  CANCELLED
  REFUNDED
  COMPLETE
}

model User {
  id            String            @id @default(cuid())
  firstName     String?
  lastName      String?
  email         String            @unique
  phoneNumber   String?
  password      String?           // For email/password authentication
  role          UserRole          @default(USER)
  addresses     DeliveryAddress[]
  orders        Order[]
  cart          Cart?
  
  // NextAuth fields
  name          String?
  image         String?
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now()) @updatedAt
}

model DeliveryAddress {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  street       String
  aptNumber    String?
  city         String
  stateCode    String   @db.VarChar(2)
  postalCode   String
}

model Product {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  category        ProductCategory
  pricePerUnit    Decimal          @db.Decimal(10,2)
  weightPerUnit   Decimal          @db.Decimal(10,3)
  quantityOnHand  Int
  cartItems       CartItem[]
  orderItems      OrderItem[]
  imageUrl        String?
}

model Cart {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String     @unique
  cartItems    CartItem[]
}

model CartItem {
  id         Int      @id @default(autoincrement())
  cart       Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId     Int
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  Int
  quantity   Int
  @@unique([cartId, productId])
}

model Order {
  id           Int         @id @default(autoincrement())
  delivery     Delivery?   @relation(fields: [deliveryId], references: [id], onDelete: Restrict)
  deliveryId   Int?
  user         User        @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId       String
  status       OrderStatus @default(PENDING)
  orderItems  OrderItem[]
}

model OrderItem {
  id           Int      @id @default(autoincrement())
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      Int
  product      Product  @relation(fields: [productId], references: [id], onDelete: NoAction)
  productId    Int
  quantity     Int
}

model Delivery {
  id           Int      @id @default(autoincrement())
  orders       Order[]
}

// NextAuth required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}